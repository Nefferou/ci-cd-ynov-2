name: Build, Test and Deploy React Application
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

# Controls when the action will run.
on:
 # Triggers the workflow on push or pull request events but only for the main branch
 push:
   branches: [ master ]
 pull_request:
   branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_test:
    permissions: # Job-level permissions configuration starts here
      contents: write           # 'write' access to repository contents
      pull-requests: write      # 'write' access to pull requests
    # The type of runner that the job will run on
    runs-on: ubuntu-latest 

    strategy:
      matrix:
        node-version: [20.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Create .env file
        run: |
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "REACT_APP_SERVER_BASE_URL=${{ secrets.REACT_APP_SERVER_BASE_URL }}" >> .env
          echo "CYPRESS_TEST_ADMIN_EMAIL=${{ secrets.CYPRESS_TEST_ADMIN_EMAIL }}" >> .env
          echo "CYPRESS_TEST_ADMIN_PASSWORD=${{ secrets.CYPRESS_TEST_ADMIN_PASSWORD }}" >> .env
      - name: npm ci, docs, build and test
        run: |
          npm ci
          npm run jsdoc
          npm run build --if-present
          npm test
      - name: Build the stack react
        run: docker compose -f docker-compose-python-server.yml up -d --build
      - name: Run e2e tests with cypress
        uses: cypress-io/github-action@v6
      - name: Stop the stack
        run: docker compose -f docker-compose-python-server.yml down
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: build
          if-no-files-found: error
      - name: Authenticate with npm
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
      - name: Check if NPM package version has been updated
        run: |
          echo "Récupération de la version publiée sur npm..."
          PUBLISHED_VERSION=$(npm view ci-cd-ynov-julien-fertilati version || echo "0.0.0")
          echo "Version publiée : $PUBLISHED_VERSION"

          echo "Récupération de la version locale du package..."
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          echo "Version locale : $LOCAL_VERSION"

          if [ "$PUBLISHED_VERSION" = "$LOCAL_VERSION" ]; then
             echo "La version locale est identique à celle publiée sur npm ($LOCAL_VERSION). Veuillez incrémenter la version dans package.json."
            exit 1
          else
            echo "La version locale est différente de celle sur npm. OK pour publier."
          fi
      - name: build and publish package on NPM
        run: |
          git config --global user.email "fertijulien@gmail.com"
          git config --global user.name "nefferou"
          npm run build-npm
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
  deploy:
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}
    runs-on: ubuntu-latest

    # Grant GITHUB_TOKEN the permissions required to make a page deployment
    permissions:
      pages: write
      id-token: write

    # Add a dependency to the build job
    needs: build_test
    # Specify runner + deployment step
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
          
  deploy_vercel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy to prod
        run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
